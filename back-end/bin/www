#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('adam-asiyoruz-backend:server');
var http = require('http');
var mongoose = require('mongoose');
var fs = require('fs');
var path = require('path');

require('dotenv').config();

const { version, author, license, name } = require('../package.json');


var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


var server = http.createServer(app);


mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.info(" ‚úîÔ∏è  Database baƒülantƒ±sƒ± ba≈üarƒ±lƒ±.");
    startServer();
  })
  .catch(err => {
    console.error(" ‚ùå  Database baƒülantƒ±sƒ± ba≈üarƒ±sƒ±z:", err);
    process.exit(1);
  });


  const instance = process.env.NODE_APP_INSTANCE;
  const isCluster = instance !== undefined && instance !== '0';
  const isPm2 = 'PM2_HOME' in process.env || instance !== undefined;

  function startServer() {
    server.listen(port, () => {
      console.info(" ------------------------------------");
      console.info(` üéâ Sunucu dinlemede: PORT = ${port}`);
      console.info(` ‚ÑπÔ∏è  NODE_ENV:   ${process.env.NODE_ENV}`);
      console.info(` ‚ÑπÔ∏è  Service Name: ${name}`);
      console.info(` ‚ÑπÔ∏è  Version:    ${version}`);
      console.info(` ‚ÑπÔ∏è  Author:     ${author}`);
      console.info(` ‚ÑπÔ∏è  License:    ${license}`);

      if (isPm2) {
        if (isCluster) {
          console.info(` üöÄ PM2 Cluster Mode ile √ßalƒ±≈üƒ±yor.`);
          console.info(` üíÖ PM2 Cluster Instance ID: ${instance}`);
          if (instance === '0') {
            console.info(` üîó PM2 Cluster Link: http://localhost:${port}`);
          }
        } else {
          console.info(` üöÄ PM2 Fork Mode ile √ßalƒ±≈üƒ±yor.`);
          console.info(` üîó PM2 Fork Link: http://localhost:${port}`);
        }
      } else {
        console.info(` üîó Seni de unutmadƒ±m pm2 kullanmayan karde≈üim al bakalƒ±m klasik Node Link: http://localhost:${port}`);
      }
      console.info(" ------------------------------------");

      if (process.env.NODE_ENV === 'production') {
        const clientBuildPath = path.join(__dirname, '../public');
        if (fs.existsSync(clientBuildPath)) {
          console.info(" ‚úîÔ∏è  Client build dosyasƒ± mevcut.");
        } else {
          console.info(" ‚ùå  Client build dosyasƒ± bulunamadƒ±!");
        }
      }
    });
  }



server.on('error', onError);


function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(' ‚ùå  ' + bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(' ‚ùå  ' + bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
